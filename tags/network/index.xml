<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Network on Lambert&#39;s blog</title>
    <link>https://lambertxiao.github.io/tags/network/</link>
    <description>Recent content in Network on Lambert&#39;s blog</description>
    <image>
      <url>https://lambertxiao.github.io/papermod-cover.png</url>
      <link>https://lambertxiao.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 10 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://lambertxiao.github.io/tags/network/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Socks5</title>
      <link>https://lambertxiao.github.io/posts/_posts/2019-12-10-socks5/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lambertxiao.github.io/posts/_posts/2019-12-10-socks5/</guid>
      <description>Socks5 概念 Socks5是一种网络传输协议, 用于客户端与(代理)服务器通讯使用
三个阶段 认证阶段 socks5比socks4多了一个认证阶段, 客户端必须将自己使用的socks版本, 加密方式等信息发送给服务端(以节点为单位, 总共258)
   VER NMETHODS METHODS     1 1 1-255      VER
使用的socks协议的版本号, 当前最新的版本号是5
  NMETHODS
METHODS 字段占用的字节数
  METHODS
METHODS是客户端支持的认证方式列表，每个方法占1字节。当前的定义是：
  0x00 不需要认证
  0x01 GSSAPI
  0x02 用户名、密码认证
  0x03 - 0x7F 由IANA分配（保留）
  0x80 - 0xFE 为私人方法保留
  0xFF 无可接受的方法
    服务端从客户端提供的方法中选择一个并通过以下消息通知客户端:</description>
    </item>
    
    <item>
      <title>什么是https</title>
      <link>https://lambertxiao.github.io/posts/_posts/2019-12-03-%E4%BB%80%E4%B9%88%E6%98%AFhttps/</link>
      <pubDate>Tue, 03 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lambertxiao.github.io/posts/_posts/2019-12-03-%E4%BB%80%E4%B9%88%E6%98%AFhttps/</guid>
      <description>什么是https 首先, 在讲我们为什么需要https之前, 先看看以下两个流程, 描述了A和B之间想要互相通信, 又想让通信的内容安全
流程1   A将对称秘钥发送给B
  B使用该秘钥加密数据, 并发送给A
  A用秘钥解开B发送的内容, AB成功通信
  缺陷: 当中间人C截获了首次通信时, A发送给B的秘钥, 则AB后续所有的交互信息都能被C解开
流程2   A将自己的公钥给B
  B收到A的公钥后, 用A的公钥加密了 B自己生成对称秘钥, 并将加密后的内容回给了B
  当A收到来自B的回复, A用自己的私钥解开了B的加密内容, 从而得到了B的对称秘钥, 后续通信使用该对称秘钥加密内容
  缺陷:
中间人C可在截获了A和B的首次通信后, 用自己的公钥给了B, B收到请求后,他不知道公钥是C发过来的,从而用了C的公钥加密了对称秘钥并回给了C, C拿到内容后,用自己的私钥解开内容,从而拿到了B的对称秘钥
这个流程的缺陷主要是A和B都无法确定收到的数据是来源与对方的, 而不是来源于中间人的.
引入证书 内容:
  证书颁发机构
  服务端网址
  机构私钥加密(服务端公钥)
  机构私钥加密(证书签名)
  流程3 此时假设A作为服务端
  A把自己的公钥给证书颁发机构</description>
    </item>
    
    <item>
      <title>TCP协议</title>
      <link>https://lambertxiao.github.io/posts/_posts/2018-09-06-tcp/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://lambertxiao.github.io/posts/_posts/2018-09-06-tcp/</guid>
      <description>TCP协议 TCP（Transmission Control Protocol 传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793定义。在简化的计算机网络OSI模型中，它完成第四层传输层所指定的功能，用户数据报协议（UDP）是同一层内另一个重要的传输协议。
主要特点  面向连接 一对一 可靠交付 全双工 面向字节流  套接字Socket的含义  Socket := IP + Port TCP连接 ：= {Socket1, Socket2} 解释为两个Socket之间的连接  TCP可靠传输的工作原理   停止等待协议
 超时重传 超时计时器 保留已发送分组的副本 对数据分组和确认分组的编号 重传时间的设置 确认丢失和确认迟到 信道利用率    连续ARQ协议
  发送方维持的滑动窗口
  累计确认
  容易实现，即使确认丢失也不必重传
  不能向发送方反映出接收方以及正确接收到的所有分组的信息
      TCP报文段的首部格式   源端口和目的端口
  序号
  确认号ack</description>
    </item>
    
    <item>
      <title>UDP协议</title>
      <link>https://lambertxiao.github.io/posts/_posts/2018-09-06-udp/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://lambertxiao.github.io/posts/_posts/2018-09-06-udp/</guid>
      <description>UDP协议 UDP协议全称是用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在第四层——传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。
  基本特点
  无连接的
  不保证可靠交付
  面向报文的，在添加了UDP协议的首部后就直接塞给UP层了
  没有拥塞控制
  支持一对一，一对多和多对多的交互通信
  UDP首部开销小
    UDP首部格式
  源端口
  目的端口
  长度
  校验和（检测UDP数据包在传输中是否有错，有错就丢弃）
    </description>
    </item>
    
  </channel>
</rss>
